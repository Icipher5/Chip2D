#include "memory.h"

// class constructor
memory::memory()
{

}

// class deconstructor
memory::~memory()
{

}

// initalizes the memory
void memory::initalize()
{
	mem[0xFFF] = 0;

	// Chip-8 font is 0-F as 4x5 sprites
	BYTE c8Font[80] = {
		0xF0, 0x90, 0x90, 0x90, 0xF0,	// 0
		0x20, 0x60, 0x20, 0x20, 0x70,	// 1
		0xF0, 0x10, 0xF0, 0x80, 0xF0,	// 2
		0xF0, 0x10, 0xF0, 0x10, 0xF0,	// 3
		0x90, 0x90, 0xF0, 0x10, 0x10,	// 4
		0xF0, 0x80, 0xF0, 0x10, 0xF0,	// 5
		0xF0, 0x80, 0xF0, 0x90, 0xF0,	// 6
		0xF0, 0x10, 0x20, 0x40, 0x40,	// 7
		0xF0, 0x90, 0xF0, 0x90, 0xF0,	// 8
		0xF0, 0x90, 0xF0, 0x10, 0xF0,	// 9
		0xF0, 0x90, 0xF0, 0x90, 0x90,	// A
		0xE0, 0x90, 0xE0, 0x90, 0xE0,	// B
		0xF0, 0x80, 0x80, 0x80, 0xF0,	// C
		0xE0, 0x90, 0x90, 0x90, 0xE0,	// D
		0xF0, 0x80, 0xF0, 0x80, 0xF0,	// E
		0xF0, 0x80, 0xF0, 0x80, 0x80	// F
	};

	// SChip-8 font is 0-F as 8x10 sprites
	BYTE sc8Font[160] = {
		0xF0, 0xF0, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xF0, 0xF0,	// 0
		0x20, 0x20, 0x60, 0x60, 0x20, 0x20, 0x20, 0x20, 0x70, 0x70, // 1
		0xF0, 0xF0, 0x10, 0x10, 0xF0, 0xF0, 0x80, 0x80, 0xF0, 0xF0, // 2
		0xF0, 0xF0, 0x10, 0x10, 0xF0, 0xF0, 0x10, 0x10, 0xF0, 0xF0, // 3
		0x90, 0x90, 0x90, 0x90, 0xF0, 0xF0, 0x10, 0x10, 0x10, 0x10, // 4
		0xF0, 0xF0, 0x80, 0x80, 0xF0, 0xF0, 0x10, 0x10, 0xF0, 0xF0, // 5
		0xF0, 0xF0, 0x80, 0x80, 0xF0, 0xF0, 0x90, 0x90, 0xF0, 0xF0, // 6
		0xF0, 0xF0, 0x10, 0x10, 0x20, 0x20, 0x40, 0x40, 0x40, 0x40, // 7
		0xF0, 0xF0, 0x90, 0x90, 0xF0, 0xF0, 0x90, 0x90, 0xF0, 0xF0, // 8
		0xF0, 0xF0, 0x90, 0x90, 0xF0, 0xF0, 0x10, 0x10, 0xF0, 0xF0, // 9
		0xF0, 0xF0, 0x90, 0x90, 0xF0, 0xF0, 0x90, 0x90, 0x90, 0x90, // A
		0xE0, 0xE0, 0x90, 0x90, 0xE0, 0xE0, 0x90, 0x90, 0xE0, 0xE0, // B
		0xF0, 0xF0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xF0, 0xF0, // C
		0xE0, 0xE0, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xE0, 0xE0, // D
		0xF0, 0xF0, 0x80, 0x80, 0xF0, 0xF0, 0x80, 0x80, 0xF0, 0xF0, // E
		0xF0, 0xF0, 0x80, 0x80, 0xF0, 0xF0, 0x80, 0x80, 0x80, 0x80  // F
	};

	// loads the 2 fonts into the memory
	for (int i = 0; i < 80; i++)
	{
		mem[i] = c8Font[i];
	}
	for (int i = 0; i < 160; i++)
	{
		mem[i + 80] = sc8Font[i];
	}
}

// writes a byte to the memory
void memory::writeMem(int location, BYTE data)
{
	mem[location] = data;
}

// reads a byte from the memory
BYTE memory::readMem(int location)
{
	return mem[location];
}

// writes to a register
void memory::writeReg(int reg, BYTE data)
{
	v[reg] = data;
}

// reads from a register
unsigned char memory::readReg(int reg)
{
	return v[reg];
}

// writes to the stack
void memory::writeStack(int position, WORD data)
{
	stack[position] = data;
}

// reads from the stack
WORD memory::readStack(int position)
{
	return stack[position];
}

// opens the rom and loads it into the memory
bool memory::openRom(LPWSTR cpFile)
{
	fp = _wfopen(cpFile, L"rb");

	// unable to open file
	if (fp == NULL)
	{
		return false;
	}

	// seek to the end of the file to know size
	fseek(fp, 0, SEEK_END);
	dwRomSize = ftell(fp);
	rewind(fp);

	// loads the rom into the memory
	fread(mem + ROM_START, 1, dwRomSize, fp);
	fclose(fp);

	return true;
}

DWORD memory::getRomSize()
{
	return dwRomSize;
}